# Generated by Django 5.2.3 on 2025-06-19 17:34

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("notifications", "0005_notificationsettings_notificationblacklist_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="NotificationJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "job_id",
                    models.CharField(
                        help_text="Human-readable job ID", max_length=20, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate"),
                            ("scheduled", "Scheduled"),
                            ("recurring", "Recurring"),
                            ("delayed", "Delayed"),
                            ("batch", "Batch"),
                        ],
                        max_length=20,
                    ),
                ),
                ("notification_type", models.CharField(max_length=50)),
                ("channel", models.CharField(max_length=20)),
                (
                    "template_id",
                    models.UUIDField(
                        blank=True,
                        help_text="Template to use for notifications",
                        null=True,
                    ),
                ),
                (
                    "recipient_filter",
                    models.JSONField(
                        default=dict,
                        help_text="Filter criteria for dynamic recipient selection",
                    ),
                ),
                ("scheduled_at", models.DateTimeField(blank=True, null=True)),
                (
                    "execute_after",
                    models.DateTimeField(
                        blank=True, help_text="Earliest execution time", null=True
                    ),
                ),
                (
                    "execute_before",
                    models.DateTimeField(
                        blank=True, help_text="Latest execution time", null=True
                    ),
                ),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "recurrence_pattern",
                    models.JSONField(
                        default=dict,
                        help_text="Recurrence pattern (daily, weekly, monthly, etc.)",
                    ),
                ),
                ("next_run_at", models.DateTimeField(blank=True, null=True)),
                ("last_run_at", models.DateTimeField(blank=True, null=True)),
                (
                    "batch_size",
                    models.PositiveIntegerField(
                        default=100, help_text="Number of notifications per batch"
                    ),
                ),
                (
                    "batch_delay",
                    models.PositiveIntegerField(
                        default=60, help_text="Delay between batches in seconds"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("queued", "Queued"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("paused", "Paused"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("attempts", models.PositiveIntegerField(default=0)),
                ("max_attempts", models.PositiveIntegerField(default=3)),
                ("total_recipients", models.PositiveIntegerField(default=0)),
                ("successful_sends", models.PositiveIntegerField(default=0)),
                ("failed_sends", models.PositiveIntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("error_details", models.JSONField(blank=True, default=dict)),
                (
                    "template_variables",
                    models.JSONField(
                        default=dict, help_text="Variables to use in template rendering"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_notification_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recipient_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="scheduled_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-priority", "scheduled_at", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationQueue",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("recipient_email", models.EmailField(blank=True, max_length=254)),
                ("recipient_phone", models.CharField(blank=True, max_length=20)),
                ("channel", models.CharField(max_length=20)),
                ("subject", models.CharField(blank=True, max_length=500)),
                ("content", models.TextField()),
                ("template_variables", models.JSONField(default=dict)),
                ("custom_data", models.JSONField(default=dict)),
                ("scheduled_at", models.DateTimeField()),
                ("priority", models.CharField(default="normal", max_length=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("retrying", "Retrying"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("attempts", models.PositiveIntegerField(default=0)),
                ("max_attempts", models.PositiveIntegerField(default=3)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("retry_after", models.DateTimeField(blank=True, null=True)),
                ("provider_message_id", models.CharField(blank=True, max_length=200)),
                ("provider_response", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="queue_items",
                        to="notifications.notificationjob",
                    ),
                ),
                (
                    "recipient_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["priority", "scheduled_at"],
            },
        ),
        migrations.CreateModel(
            name="CronJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "cron_type",
                    models.CharField(
                        choices=[
                            ("notification_reminders", "Notification Reminders"),
                            ("digest_emails", "Digest Emails"),
                            ("cleanup_tasks", "Cleanup Tasks"),
                            ("analytics_reports", "Analytics Reports"),
                            ("system_alerts", "System Alerts"),
                            ("custom", "Custom Task"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "cron_expression",
                    models.CharField(
                        help_text="Cron expression (e.g., '0 9 * * *' for daily at 9 AM)",
                        max_length=100,
                    ),
                ),
                (
                    "task_function",
                    models.CharField(
                        help_text="Python function to execute", max_length=200
                    ),
                ),
                (
                    "task_parameters",
                    models.JSONField(
                        default=dict, help_text="Parameters to pass to the task"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_running", models.BooleanField(default=False)),
                ("last_run_at", models.DateTimeField(blank=True, null=True)),
                ("next_run_at", models.DateTimeField(blank=True, null=True)),
                ("run_count", models.PositiveIntegerField(default=0)),
                ("success_count", models.PositiveIntegerField(default=0)),
                ("failure_count", models.PositiveIntegerField(default=0)),
                ("last_error", models.TextField(blank=True)),
                (
                    "max_failures",
                    models.PositiveIntegerField(
                        default=5, help_text="Max consecutive failures before disabling"
                    ),
                ),
                ("consecutive_failures", models.PositiveIntegerField(default=0)),
                (
                    "timeout_seconds",
                    models.PositiveIntegerField(
                        default=300, help_text="Task timeout in seconds"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "next_run_at"],
                        name="notificatio_is_acti_6c2334_idx",
                    ),
                    models.Index(
                        fields=["cron_type", "is_active"],
                        name="notificatio_cron_ty_2a966c_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="notificationjob",
            index=models.Index(
                fields=["status", "scheduled_at"], name="notificatio_status_c0a7cd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationjob",
            index=models.Index(
                fields=["job_type", "status"], name="notificatio_job_typ_b5e4ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationjob",
            index=models.Index(
                fields=["next_run_at"], name="notificatio_next_ru_9e7a09_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationqueue",
            index=models.Index(
                fields=["status", "scheduled_at"], name="notificatio_status_4f46bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationqueue",
            index=models.Index(
                fields=["job", "status"], name="notificatio_job_id_8ca581_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationqueue",
            index=models.Index(
                fields=["retry_after"], name="notificatio_retry_a_cdff9a_idx"
            ),
        ),
    ]
