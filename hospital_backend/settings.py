"""
Django settings for hospital_backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Import security configuration
from .security import get_security_settings

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default="django-insecure-=2649iemaeu@dv8x4rbk8ikypwwgfmd1u$7_^-9_xu093x3cqd")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third party apps
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_filters",
    "drf_spectacular",
    "django_extensions",

    # Local apps
    "accounts",
    "patients",
    "doctors",
    "appointments",
    "medical_records",
    "billing",
    "infrastructure",
    "notifications",
    "tests",
]

# Optimized middleware stack for production performance
MIDDLEWARE = [
    # Core Django middleware (required)
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",

    # Caching middleware (add for performance)
    "django.middleware.cache.UpdateCacheMiddleware",

    # Session and common middleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",

    # Essential custom middleware (optimized for production)
    "accounts.middleware.SecurityHeadersMiddleware",       # Security headers - ESSENTIAL
    "accounts.middleware.RateLimitingMiddleware",          # Rate limiting - ESSENTIAL for API

    # Performance monitoring (lightweight)
    "hospital_backend.performance_middleware.LightweightPerformanceMiddleware",

    # Optional middleware (enable based on needs)
    # "accounts.middleware.IPFilteringMiddleware",           # IP filtering - Enable if needed
    # "accounts.middleware.APIRequestValidationMiddleware",  # API validation - Enable for strict validation
    # "accounts.middleware.UserActivityMiddleware",          # Activity logging - Enable for audit trail
    # "hospital_backend.performance_middleware.RequestSizeMiddleware",  # Request/response size monitoring

    # Standard Django middleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # Compression middleware (add for better performance)
    "django.middleware.gzip.GZipMiddleware",

    # Cache middleware (fetch from cache)
    "django.middleware.cache.FetchFromCacheMiddleware",
]

ROOT_URLCONF = "hospital_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hospital_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration
DB_ENGINE = config('DB_ENGINE', default='django.db.backends.sqlite3')
DB_NAME = config('DB_NAME', default='hospital_db.sqlite3', cast=str)

# Build database path for SQLite
if DB_ENGINE == 'django.db.backends.sqlite3':
    DATABASE_NAME = str(BASE_DIR / str(DB_NAME))
else:
    DATABASE_NAME = DB_NAME

DATABASES = {
    "default": {
        "ENGINE": DB_ENGINE,
        "NAME": DATABASE_NAME,
        "USER": config('DB_USER', default=''),
        "PASSWORD": config('DB_PASSWORD', default=''),
        "HOST": config('DB_HOST', default=''),
        "PORT": config('DB_PORT', default='', cast=str),
        "OPTIONS": {
            "sslmode": "require"
        } if DB_ENGINE == 'django.db.backends.postgresql' else {},
        # Connection pooling settings
        "CONN_MAX_AGE": 600,  # 10 minutes
        "CONN_HEALTH_CHECKS": True,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# Simplified password validation for development performance
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    # Custom validators disabled for development performance
    # {
    #     "NAME": "accounts.password_validators.HospitalPasswordValidator",
    #     "OPTIONS": {
    #         "min_length": 8,
    #         "require_uppercase": True,
    #         "require_lowercase": True,
    #         "require_numbers": True,
    #         "require_special": True,
    #     }
    # },
    # {
    #     "NAME": "accounts.password_validators.PasswordHistoryValidator",
    #     "OPTIONS": {
    #         "history_count": 5,
    #     }
    # },
]


# Caching Configuration
# Use Redis in production, fallback to database cache in development
USE_REDIS = config('USE_REDIS', default=False, cast=bool)

if USE_REDIS:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
                'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
                'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            },
            'KEY_PREFIX': 'hospital_cache',
            'TIMEOUT': 300,  # Default 5 minutes
        },
        'sessions': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/2'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 20,
                    'retry_on_timeout': True,
                },
            },
            'KEY_PREFIX': 'hospital_session',
            'TIMEOUT': 3600,  # 1 hour for sessions
        },
        'api_cache': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/3'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 30,
                    'retry_on_timeout': True,
                },
            },
            'KEY_PREFIX': 'hospital_api',
            'TIMEOUT': 180,  # 3 minutes for API responses
        }
    }
else:
    # Fallback to database cache for development
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'hospital_cache_table',
            'TIMEOUT': 300,  # Default 5 minutes
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
            }
        },
        'sessions': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'hospital_session_cache',
            'TIMEOUT': 3600,  # 1 hour for sessions
            'OPTIONS': {
                'MAX_ENTRIES': 500,
            }
        },
        'api_cache': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'hospital_api_cache',
            'TIMEOUT': 180,  # 3 minutes for API responses
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
            }
        }
    }

# Session Configuration
if USE_REDIS:
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'sessions'
else:
    SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
    SESSION_CACHE_ALIAS = 'sessions'

SESSION_COOKIE_AGE = config('SESSION_COOKIE_AGE', default=3600, cast=int)
SESSION_SAVE_EVERY_REQUEST = False  # Disabled for performance - was True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Cache Middleware Configuration
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 300
CACHE_MIDDLEWARE_KEY_PREFIX = 'hospital_middleware'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Authentication Backends - Temporarily simplified for debugging
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default Django backend - ENABLED for debugging
    # 'accounts.backends.EmailOrUsernameModelBackend',  # Email/username backend - DISABLED for debugging
    # 'accounts.backends.SecureAuthenticationBackend',  # Primary secure backend - DISABLED FOR PERFORMANCE
    # 'accounts.backends.RoleBasedAuthenticationBackend',  # Role-based authentication - DISABLED FOR PERFORMANCE
]

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Throttling disabled for development performance
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'hospital_backend.throttling.UserRateThrottle',
    #     'hospital_backend.throttling.IPRateThrottle',
    #     'hospital_backend.throttling.BurstRateThrottle',
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'user': '500/hour',
    #     'anon': '100/hour',
    #     'login': '5/5min',
    #     'upload': '10/hour',
    #     'search': '100/hour',
    #     'reports': '20/hour',
    #     'burst': '20/min',
    #     'medical_records': '200/hour',
    #     'billing': '50/hour',
    # },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# JWT Configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=config('JWT_ACCESS_TOKEN_LIFETIME', default=60, cast=int)),
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=config('JWT_REFRESH_TOKEN_LIFETIME', default=1440, cast=int)),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('JWT_SECRET_KEY', default=SECRET_KEY),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

CORS_ALLOW_CREDENTIALS = True

# API Documentation with drf-spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'Hospital Management System API',
    'DESCRIPTION': '''
    A comprehensive hospital management system API providing endpoints for:

    - **Authentication & User Management**: User registration, login, profile management
    - **Patient Management**: Patient registration, profiles, medical information
    - **Doctor Management**: Doctor profiles, specializations, availability
    - **Appointment Scheduling**: Booking, management, and tracking
    - **Medical Records**: Electronic health records, diagnoses, treatments
    - **Billing & Invoicing**: Payment processing, insurance claims
    - **Notifications**: Email and SMS notifications

    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Rate Limiting
    API endpoints are rate-limited to prevent abuse:
    - Authentication endpoints: 10 requests per minute
    - General API endpoints: 100 requests per minute

    ## Error Handling
    The API returns standardized error responses with appropriate HTTP status codes and detailed error messages.
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'DISABLE_ERRORS_AND_WARNINGS': True,
    'TAGS': [
        # Core Service Groups
        {
            'name': 'Authentication & User Management',
            'description': 'User authentication, registration, profile management, roles, and permissions'
        },
        {
            'name': 'Patient Management',
            'description': 'Patient registration, profiles, medical information, emergency contacts, and insurance'
        },
        {
            'name': 'Doctor Management',
            'description': 'Doctor profiles, specializations, qualifications, departments, and availability'
        },
        {
            'name': 'Appointment Management',
            'description': 'Appointment booking, scheduling, management, and status tracking'
        },
        {
            'name': 'Medical Records Management',
            'description': 'Electronic health records, medical history, diagnoses, treatments, and vital signs'
        },
        {
            'name': 'Billing & Financial Management',
            'description': 'Invoice generation, payment processing, insurance claims, and financial reporting'
        },

        # Notification Services - Hierarchical Structure
        {
            'name': 'Email Notifications',
            'description': 'Email notification management, templates, and delivery tracking'
        },
        {
            'name': 'SMS Notifications',
            'description': 'SMS notification management, templates, and delivery tracking'
        },
        {
            'name': 'Push Notifications',
            'description': 'Push notification management, device registration, and delivery tracking'
        },
        {
            'name': 'Notification Templates',
            'description': 'Template management for all notification types and unified template system'
        },
        {
            'name': 'Notification Preferences',
            'description': 'User notification preferences, settings, and subscription management'
        },

        # Infrastructure and Administration
        {
            'name': 'Hospital Infrastructure',
            'description': 'Hospital buildings, rooms, equipment, and facility management'
        }
    ],
    'SERVERS': [
        {
            'url': 'http://localhost:8000',
            'description': 'Development server'
        },
        {
            'url': 'https://api.hospital.com',
            'description': 'Production server'
        }
    ],
    'EXTERNAL_DOCS': {
        'description': 'Hospital Management System Documentation',
        'url': 'https://docs.hospital.com'
    },
    'CONTACT': {
        'name': 'Hospital Management System API Support',
        'email': 'api-support@hospital.com'
    },
    'LICENSE': {
        'name': 'MIT License',
        'url': 'https://opensource.org/licenses/MIT'
    }
}

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = config('MAX_UPLOAD_SIZE', default=10485760, cast=int)  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = config('MAX_UPLOAD_SIZE', default=10485760, cast=int)

# Media Files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Static Files - Optimized for production
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static file optimization
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Additional static file directories
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Static file finders (optimized order)
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Email Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@hospital.com')

# Frontend URL for password reset links
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')

# Celery Configuration
CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Apply Security Settings - Disabled for development performance
# security_settings = get_security_settings(DEBUG)
# locals().update(security_settings)

# Additional Security Configuration
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_REDIRECT_EXEMPT = []

# Session Security
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_AGE = config('SESSION_COOKIE_AGE', default=3600, cast=int)

# CSRF Security
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Strict'
CSRF_TRUSTED_ORIGINS = config(
    'CSRF_TRUSTED_ORIGINS',
    default='https://localhost,https://127.0.0.1',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = config('FILE_UPLOAD_MAX_MEMORY_SIZE', default=5242880, cast=int)  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = config('DATA_UPLOAD_MAX_MEMORY_SIZE', default=5242880, cast=int)  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Security Monitoring
FAILED_LOGIN_THRESHOLD = config('FAILED_LOGIN_THRESHOLD', default=5, cast=int)
ACCOUNT_LOCKOUT_DURATION = config('ACCOUNT_LOCKOUT_DURATION', default=1800, cast=int)
IP_WHITELIST_ENABLED = config('IP_WHITELIST_ENABLED', default=False, cast=bool)
IP_BLACKLIST_ENABLED = config('IP_BLACKLIST_ENABLED', default=True, cast=bool)

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{{"level": "{levelname}", "time": "{asctime}", "module": "{module}", "message": "{message}"}}',
            'style': '{',
        },
        'security': {
            'format': '[SECURITY] {levelname} {asctime} {module} - {message}',
            'style': '{',
        },
        'performance': {
            'format': '[PERFORMANCE] {levelname} {asctime} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'hospital_management.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'errors.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'security',
        },
        'performance_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'performance.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
            'formatter': 'performance',
        },
        'monitoring_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'monitoring.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'cache_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'cache.log',
            'maxBytes': 5242880,  # 5MB
            'backupCount': 3,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'security': {
            'handlers': ['security_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'performance': {
            'handlers': ['performance_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring': {
            'handlers': ['monitoring_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'cache': {
            'handlers': ['cache_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'error': {
            'handlers': ['error_file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'hospital_backend': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Monitoring and Alerting Configuration
ADMIN_ALERT_EMAILS = config(
    'ADMIN_ALERT_EMAILS',
    default='admin@hospital.com',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# Performance Monitoring Thresholds
PERFORMANCE_THRESHOLDS = {
    'slow_query_time': config('SLOW_QUERY_TIME', default=1.0, cast=float),
    'slow_api_time': config('SLOW_API_TIME', default=3.0, cast=float),
    'slow_function_time': config('SLOW_FUNCTION_TIME', default=5.0, cast=float),
    'high_cpu_percent': config('HIGH_CPU_PERCENT', default=85, cast=int),
    'high_memory_percent': config('HIGH_MEMORY_PERCENT', default=85, cast=int),
    'high_disk_percent': config('HIGH_DISK_PERCENT', default=90, cast=int),
}

# Middleware Performance Settings
SLOW_REQUEST_THRESHOLD = config('SLOW_REQUEST_THRESHOLD', default=2.0, cast=float)
SLOW_QUERY_THRESHOLD = config('SLOW_QUERY_THRESHOLD', default=1.0, cast=float)
LARGE_REQUEST_THRESHOLD = config('LARGE_REQUEST_THRESHOLD', default=1048576, cast=int)  # 1MB
LARGE_RESPONSE_THRESHOLD = config('LARGE_RESPONSE_THRESHOLD', default=5242880, cast=int)  # 5MB
